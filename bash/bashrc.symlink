export DOTFILESDIR=$HOME/.dotfiles
export PROJECTS=~/Projects

function source_files() {
	for file in $@; do
		echo "source file $file"
		source $file
	done
}


## Prompt with git info
if [[ "$(uname -s)" == Darwin ]]; then
	PS1='\[\e[00m\][`a=$?;if [ $a -ne 0 ]; then echo -n -e "\[\033[1;31m\]{$a}"; fi`\[\033[01;32m\]\u@\h\[\033[00m\] \[\033[01;34m\]\w\[\e[00m\]]`b=$(git branch 2>/dev/null | sed -e "/^ /d" -e "s/* \(.*\)/\1/"); [[ "$b" != "" ]] && echo -n -e "\[\e[33;40m\](branch:$b)\[\033[01;32m\]\[\e[00m\]"` \n\[\033[01;34m\]$\[\e[00m\] '
fi


# Source global definitions (CentOS way)
# 记： if 是bash判断后面的命令运行之后bash设定的返回值变量 $?， if..then..elif..else..fi 一起使用
# $ type [
# [ is a shell builtin  <-- [当作一个命令处理， 所以 这里跟上一些命令再跟上 && 加命令bash会以为 前面的命令是 [... 缺少了 ] 号
#$ type [[
#[[ is a shell keyword  <-- 因为[[是关键词，所以[[]]内部使用 && 什么的却是合法的
#if [ -f /etc/bashrc ]; then
#	source /etc/bashrc
#fi

# use .localrc for SUPER SECRET CRAP that you don't
# want in your public, versioned repo.
if [[ -a ~/.localrc ]]
then
  source ~/.localrc
fi


# find & load path files
load_files=$(find $DOTFILESDIR -maxdepth 2 -name 'path.bash')
source_files $load_files

# find & load other files
load_files=$(find $DOTFILESDIR -maxdepth 2 -name '*.bash' ! -name 'path.bash')
source_files $load_files